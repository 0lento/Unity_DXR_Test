#pragma kernel RaytracingIndirectDiffuseFullRes
#pragma kernel IndirectDiffuseAccumulation

// Include and define the shader pass
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/ShaderPass/ShaderPass.cs.hlsl"
#define SHADERPASS SHADERPASS_RAYTRACING

// HDRP generic includes
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Common.hlsl"
#include "Packages/com.unity.render-pipelines.core/ShaderLibrary/Color.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/ShaderLibrary/ShaderVariables.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/Material.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Material/NormalBuffer.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/Lighting/ScreenSpaceLighting/ScreenSpaceLighting.hlsl"

// Raytracing includes
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/ShaderVariablesRaytracing.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingSampling.hlsl"
#include "Packages/com.unity.render-pipelines.high-definition/Runtime/RenderPipeline/Raytracing/Shaders/RaytracingCommon.hlsl"

#pragma only_renderers d3d11

// Tile size of this compute
#define RAYTRACING_INDIRECT_DIFFUSE_TILE_SIZE 8

TEXTURE2D_X(_DepthTexture);
RW_TEXTURE2D_X(float4, _RaytracingDirectionBuffer);

[numthreads(RAYTRACING_INDIRECT_DIFFUSE_TILE_SIZE, RAYTRACING_INDIRECT_DIFFUSE_TILE_SIZE, 1)]
void RaytracingIndirectDiffuseFullRes(uint2 groupThreadId : SV_GroupThreadID, uint2 groupId : SV_GroupID)
{
    // Compute the pixel position to process
    uint2 currentCoord = groupId * RAYTRACING_INDIRECT_DIFFUSE_TILE_SIZE + groupThreadId;
    currentCoord.x = currentCoord.x + (unity_StereoEyeIndex * _ScreenSize.x);

    // Clear the output color texture
    _RaytracingDirectionBuffer[COORD_TEXTURE2D_X(currentCoord)] = float4(0.0, 0.0, 0.0, -1.0f);

    // Read the depth value
    float depthValue = LOAD_TEXTURE2D_X(_DepthTexture, currentCoord).x;

    // This point is part of the background, we don't really care
    if (depthValue == UNITY_RAW_FAR_CLIP_VALUE)
        return;

    // Convert this to a world space position
    PositionInputs posInput = GetPositionInput(currentCoord, _ScreenSize.zw, depthValue, _InvViewProjMatrix, GetWorldToViewMatrix(), 0);
    float distanceToCamera = length(posInput.positionWS);
    float3 positionWS = GetAbsolutePositionWS(posInput.positionWS);

    // Compute the incident vector on the surfaces
    float3 viewWS = normalize(_WorldSpaceCameraPos - positionWS);

    // Decode the world space normal
    NormalData normalData;
    DecodeFromNormalBuffer(currentCoord, normalData);

    // Generate the new sample (follwing values of the sequence)
    float2 sample;
    sample.x = GetBNDSequenceSample(currentCoord, _RaytracingFrameIndex, 0);
    sample.y = GetBNDSequenceSample(currentCoord, _RaytracingFrameIndex, 1);

    // Importance sample with a cosine lobe
    float3 sampleDir = SampleHemisphereCosine(sample.x, sample.y, normalData.normalWS);

    // PDF is the cosine
    float samplePDF = dot(sampleDir, normalData.normalWS);

    // Write the output ray data
    _RaytracingDirectionBuffer[COORD_TEXTURE2D_X(currentCoord)] = float4(sampleDir, 1.0 / samplePDF);
}

// Gbuffer textures to accumulate the indirect diffuse
TEXTURE2D_X(_GBufferTexture0);
RW_TEXTURE2D_X(float4, _GBufferTexture3);

[numthreads(RAYTRACING_INDIRECT_DIFFUSE_TILE_SIZE, RAYTRACING_INDIRECT_DIFFUSE_TILE_SIZE, 1)]
void IndirectDiffuseAccumulation(uint2 groupThreadId : SV_GroupThreadID, uint2 groupId : SV_GroupID)
{
#if SHADEROPTIONS_RAYTRACING
    // Fetch the current pixel coordinate
    uint2 currentPixelCoordinate = groupId * RAYTRACING_INDIRECT_DIFFUSE_TILE_SIZE + groupThreadId;

    // Add the indirect diffuse to the buffer (while pre-multiplying by the base color)
    _GBufferTexture3[COORD_TEXTURE2D_X(currentPixelCoordinate)] += LOAD_TEXTURE2D_X(_IndirectDiffuseTexture, currentPixelCoordinate) * LOAD_TEXTURE2D_X(_GBufferTexture0, currentPixelCoordinate);
#endif
}
