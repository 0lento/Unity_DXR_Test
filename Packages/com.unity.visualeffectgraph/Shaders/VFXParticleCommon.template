${VFXBegin:VFXVertexCommonProcess}
#if VFX_USE_COLOR_CURRENT && defined(VFX_VARYING_COLOR)
o.VFX_VARYING_COLOR = color;
#endif
#if VFX_USE_ALPHA_CURRENT && defined(VFX_VARYING_ALPHA) 
o.VFX_VARYING_ALPHA = alpha;
#endif

#ifdef VFX_VARYING_EXPOSUREWEIGHT
${VFXLoadParameter:{exposureWeight}}
o.VFX_VARYING_EXPOSUREWEIGHT = exposureWeight;
#endif

#if USE_SOFT_PARTICLE && defined(VFX_VARYING_INVSOFTPARTICLEFADEDISTANCE)
${VFXLoadParameter:{invSoftParticlesFadeDistance}}
o.VFX_VARYING_INVSOFTPARTICLEFADEDISTANCE = invSoftParticlesFadeDistance;
#endif

#if USE_ALPHA_TEST && defined(VFX_VARYING_ALPHATHRESHOLD)
${VFXLoadParameter:{alphaThreshold}}
o.VFX_VARYING_ALPHATHRESHOLD = alphaThreshold;
#endif

#if USE_UV_SCALE_BIAS
${VFXLoadParameter:{uvScale}}
${VFXLoadParameter:{uvBias}}
#if defined (VFX_VARYING_UV)
o.VFX_VARYING_UV.xy = o.VFX_VARYING_UV.xy * uvScale + uvBias;
#endif
#endif

#if defined(VFX_VARYING_POSWS)
o.VFX_VARYING_POSWS = TransformPositionVFXToWorld(vPos);
#endif
${VFXEnd}

${VFXBegin:VFXLoadSize}
float3 size3 = float3(size,size,size);
#if VFX_USE_SCALEX_CURRENT
size3.x *= scaleX;
#endif
#if VFX_USE_SCALEY_CURRENT
size3.y *= scaleY;
#endif
#if VFX_USE_SCALEZ_CURRENT
size3.z *= scaleZ;
#endif
${VFXEnd}

${VFXBegin:VFXVertexSetFlipbooksInterpolants}
#if USE_FLIPBOOK && defined(VFX_VARYING_UV)
${VFXLoadParameter:{flipBookSize}}
${VFXLoadParameter:{invFlipBookSize}}
VFXUVData uvData = GetUVData(flipBookSize, invFlipBookSize, o.VFX_VARYING_UV.xy, texIndex);
o.VFX_VARYING_UV.xy = uvData.uvs.xy;
#if USE_FLIPBOOK_INTERPOLATION && defined(VFX_VARYING_UV) && defined (VFX_VARYING_FRAMEBLEND)
o.VFX_VARYING_UV.zw = uvData.uvs.zw;
o.VFX_VARYING_FRAMEBLEND = uvData.blend;
#if USE_FLIPBOOK_MOTIONVECTORS && defined(VFX_VARYING_MOTIONVECTORSCALE)
${VFXLoadParameter:{motionVectorScale}}
o.VFX_VARYING_MOTIONVECTORSCALE = motionVectorScale * invFlipBookSize;
#endif
#endif
#endif
${VFXEnd}

${VFXBegin:VFXFragmentCommonFunctions}#include "Packages/com.unity.visualeffectgraph/Shaders/VFXCommonOutput.hlsl"${VFXEnd}

${VFXBegin:VFXLoadAttributesOrCull}
uint deadCount = 0;
#if USE_DEAD_LIST_COUNT
deadCount = deadListCount.Load(0);
#endif	
if (index >= asuint(nbMax) - deadCount)
#if USE_GEOMETRY_SHADER
	return; // cull
#else
	return o; // cull
#endif

#if VFX_HAS_INDIRECT_DRAW
index = indirectBuffer[index];
${VFXLoadAttributes}
#else
${VFXLoadAttributes:{alive}}
#if !HAS_STRIPS
if (!alive)
	return o;
#endif
	
${VFXLoadAttributes:{(?!(alive))(\b\w)}}
#endif
${VFXEnd}

${VFXBegin:VFXVertexComputeCurrentAndPreviousClipPos}
#if defined(VFX_VARYING_VELOCITY_CPOS) && defined(VFX_VARYING_VELOCITY_CPOS_PREVIOUS)
float4x4 previousElementToVFX = (float4x4)0;
previousElementToVFX[3] = float4(0,0,0,1);

UNITY_UNROLL
for (int itIndexMatrixRow = 0; itIndexMatrixRow < 3; ++itIndexMatrixRow)
{
	UNITY_UNROLL
	for (int itIndexMatrixCol = 0; itIndexMatrixCol < 4; ++itIndexMatrixCol)
	{
		uint itIndexMatrix = itIndexMatrixCol * 4 + itIndexMatrixRow;
		uint read = elementToVFXBufferPrevious.Load((index * 16 + itIndexMatrix) << 2);
		previousElementToVFX[itIndexMatrixRow][itIndexMatrixCol] = asfloat(read);
	}
}

uint previousFrameIndex = elementToVFXBufferPrevious.Load((index * 16 + 15) << 2);
o.VFX_VARYING_VELOCITY_CPOS = o.VFX_VARYING_VELOCITY_CPOS_PREVIOUS = float4(0.0f, 0.0f, 0.0f, 1.0f);
if (asuint(currentFrameIndex) - previousFrameIndex == 1u)
{
	float3 oldvPos = mul(previousElementToVFX,float4(inputVertexPosition, 1.0f)).xyz;
	o.VFX_VARYING_VELOCITY_CPOS_PREVIOUS = TransformPositionVFXToPreviousClip(oldvPos);
	o.VFX_VARYING_VELOCITY_CPOS = TransformPositionVFXToNonJitteredClip(vPos);
}
#endif
${VFXEnd}

${VFXBegin:VFXComputeOutputMotionVector}
float2 velocity = (i.VFX_VARYING_VELOCITY_CPOS.xy/i.VFX_VARYING_VELOCITY_CPOS.w) - (i.VFX_VARYING_VELOCITY_CPOS_PREVIOUS.xy/i.VFX_VARYING_VELOCITY_CPOS_PREVIOUS.w);
#if UNITY_UV_STARTS_AT_TOP
	velocity.y = -velocity.y;
#endif
float4 encodedMotionVector = 0.0f;
VFXEncodeMotionVector(velocity * 0.5f, encodedMotionVector);
${VFXEnd}

${VFXBegin:VFXApplyColor}

float4 color = VFXGetFragmentColor(i);

#ifndef VFX_TEXTURE_COLOR
	#define VFX_TEXTURE_COLOR float4(1.0,1.0,1.0,1.0)
#endif

#if VFX_COLORMAPPING_DEFAULT
	o.color = color * VFX_TEXTURE_COLOR;
#endif

#if VFX_COLORMAPPING_GRADIENTMAPPED
	${VFXLoadAttributes:{gradient}}
	o.color = SampleGradient(gradient, VFX_TEXTURE_COLOR.a * color.a) * float4(color.rgb,1.0);
#endif

${VFXEnd}
