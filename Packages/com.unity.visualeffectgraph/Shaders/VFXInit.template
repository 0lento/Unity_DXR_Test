#pragma kernel CSMain
${VFXGlobalInclude}
${VFXGlobalDeclaration}
${VFXPerPassInclude}

#define USE_DEAD_LIST (VFX_USE_ALIVE_CURRENT && !HAS_STRIPS)

RWByteAddressBuffer attributeBuffer;
ByteAddressBuffer sourceAttributeBuffer;

CBUFFER_START(initParams)
#if !VFX_USE_SPAWNER_FROM_GPU
    uint nbSpawned;					// Numbers of particle spawned
    uint spawnIndex;				// Index of the first particle spawned
    uint dispatchWidth;
#else
    uint offsetInAdditionalOutput;
	uint nbMax;
#endif
	uint systemSeed;
CBUFFER_END

#if USE_DEAD_LIST
RWStructuredBuffer<uint> deadListIn;
ByteAddressBuffer deadListCount; // This is bad to use a SRV to fetch deadList count but Unity API currently prevent from copying to CB
#endif

#if VFX_USE_SPAWNER_FROM_GPU
StructuredBuffer<uint> eventList;
ByteAddressBuffer inputAdditional;
#endif

#if HAS_STRIPS
RWBuffer<uint> stripData;
#endif

${VFXGeneratedBlockFunction}

bool GetParticleIndex(inout uint particleIndex, bool alive, uint stripIndex)
{
	if (!alive)
		return false;
	
#if HAS_STRIPS
	uint relativeIndex;
	InterlockedAdd(STRIP_DATA(STRIP_NEXT_INDEX), 1, relativeIndex);
	if (relativeIndex >= PARTICLE_PER_STRIP_COUNT) // strip is full
	{
		InterlockedAdd(STRIP_DATA(STRIP_NEXT_INDEX), -1); // Remove previous increment
		return false;
	}

	particleIndex = stripIndex * PARTICLE_PER_STRIP_COUNT + ((STRIP_DATA(STRIP_FIRST_INDEX) + relativeIndex) % PARTICLE_PER_STRIP_COUNT);
#elif USE_DEAD_LIST
	uint deadIndex = deadListIn.DecrementCounter();
    particleIndex = deadListIn[deadIndex];
#endif
	return true;
}

[numthreads(NB_THREADS_PER_GROUP,1,1)]
void CSMain(uint3 groupId          : SV_GroupID,
            uint3 groupThreadId    : SV_GroupThreadID)
{
    uint id = groupThreadId.x + groupId.x * NB_THREADS_PER_GROUP;
#if !VFX_USE_SPAWNER_FROM_GPU
    id += groupId.y * dispatchWidth * NB_THREADS_PER_GROUP;
#endif

#if VFX_USE_SPAWNER_FROM_GPU
    uint maxThreadId = inputAdditional.Load((offsetInAdditionalOutput * 2 + 0) << 2);
    uint currentSpawnIndex = inputAdditional.Load((offsetInAdditionalOutput * 2 + 1) << 2) - maxThreadId;
#else
    uint maxThreadId = nbSpawned;
    uint currentSpawnIndex = spawnIndex;
#endif

#if USE_DEAD_LIST
    maxThreadId = min(maxThreadId, deadListCount.Load(0x0));
#elif VFX_USE_SPAWNER_FROM_GPU
    maxThreadId = min(maxThreadId, nbMax); //otherwise, nbSpawned already clamped on CPU
#endif

    if (id < maxThreadId)
    {
#if VFX_USE_SPAWNER_FROM_GPU
        int sourceIndex = eventList[id];
#endif
		uint particleIndex = id + currentSpawnIndex;
		
#if !VFX_USE_SPAWNER_FROM_GPU
        ${VFXComputeSourceIndex}
#endif
        ${VFXLoadAttributes}
#if VFX_USE_PARTICLEID_CURRENT
         particleId = particleIndex;
#endif
#if VFX_USE_SEED_CURRENT
        seed = WangHash(particleIndex ^ systemSeed);
#endif
#if HAS_STRIPS
		${VFXLoadParameter:{stripIndex}}
		stripIndex = min(stripIndex, STRIP_COUNT);
		// TODO Change seed to be sure we're deterministic on random with strip
#else
		uint stripIndex = 0;
#endif
        
        ${VFXProcessBlocks}

		uint index = particleIndex;
#if !VFX_USE_ALIVE_CURRENT
		bool alive = true;
#endif
        if (GetParticleIndex(index, alive, stripIndex))
        {
            ${VFXStoreAttributes}
        }
    }
}
